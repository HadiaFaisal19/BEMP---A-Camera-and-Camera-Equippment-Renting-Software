@page "/productlist"
@using ClassLibraryModel
@using ClassLibraryDal
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation
@using System.Data.SqlClient


<h2>Product List</h2>
<div class="top-bar">
    <div class="search-container">
        <input type="text" placeholder="Search here..." @bind="searchTerm" @oninput="SearchProducts" />
    </div>
    <div class="top-buttons">
        <button @onclick="NavigateToAddProduct">Add Product</button>
    </div>
</div>


<div class="category-buttons">
    <button @onclick='() => FilterByCategory(null)'>All Products</button>
    <button @onclick='() => FilterByCategory("Camera")'>Camera</button>
    <button @onclick='() => FilterByCategory("Lens")'>Lens</button>
    <button @onclick='() => FilterByCategory("Gimbles")'>Gimbles</button>
    <button @onclick='() => FilterByCategory("Light")'>Lights</button>
    <button @onclick='() => FilterByCategory("Others")'>Others</button>
</div>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in filteredProducts)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>
                        <button @onclick="() => ViewProduct(product.Id)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedProduct != null)
{
    <div class="product-details">
        <h3>Product Details</h3>
        <p><strong>Name:</strong> @selectedProduct.Name</p>
        <p><strong>Category:</strong> @selectedProduct.Category</p>
        <p><strong>Brand:</strong> @selectedProduct.Brand</p>
        <p><strong>Price:</strong> @selectedProduct.Price</p>
        <p><strong>Description:</strong> @selectedProduct.Description</p>
        <p><strong>Available:</strong> @(selectedProduct.IsAvailable ? "Yes" : "No")</p>
        <button @onclick="DeleteProduct">Delete</button>
        <button @onclick="NavigateToUpdateProduct">Update</button>
    </div>
}

<style>
    h2 {
        text-align: center;
        margin-bottom: 20px;
    }

    .top-bar {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .top-buttons {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 20px;
    }

    .search-container {
        flex-grow: 1;
        display: flex;
    }

    button {
        margin-right: 10px;
        padding: 10px 20px;
        background-color: cornflowerblue;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #45a049;
        }

    .search-container {
        display: flex;
        align-items: center;
        margin-right: 250px;
        margin-left: 10px;
        width: 20%; /* Adjust the width as needed */
    }

    input[type="text"] {
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%;
    }

    .category-buttons {
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

    .product-details {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
</style>

@code {
    private void NavigateToAddProduct()
    {
        Navigation.NavigateTo("/addproduct");
    }

    private List<Product> products;
    private List<Product> filteredProducts;
    private Product selectedProduct;
    private string searchTerm = string.Empty;
    private string selectedCategory = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await Task.Run(() => DalProductDetails.GetAllProducts());
        FilterProducts();
        StateHasChanged();
    }

    private void FilterProducts()
    {
        filteredProducts = products
            .Where(p => (string.IsNullOrEmpty(searchTerm) || p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                        (string.IsNullOrEmpty(selectedCategory) || p.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private void ViewProduct(int productId)
    {
        selectedProduct = DalProductDetails.GetProductById(productId);
        StateHasChanged();
    }

    private void DeleteProduct()
    {
        if (selectedProduct != null)
        {
            Task.Run(() => DalProductDetails.DeleteProduct(selectedProduct.Id)).Wait();
            products = Task.Run(() => DalProductDetails.GetAllProducts()).Result;
            FilterProducts();
            selectedProduct = null;
            StateHasChanged();
        }
    }

    private void NavigateToUpdateProduct()
    {
        if (selectedProduct != null)
        {
            Navigation.NavigateTo($"/updateproduct/{selectedProduct.Id}");
        }
    }

    private void SearchProducts(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterProducts();
    }

    private void FilterByCategory(string category)
    {
        selectedCategory = category;
        FilterProducts();
    }
}
