@page "/addcustomer"
@using ClassLibraryModel
@using ClassLibraryDal
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h2>Add New Customer</h2>

<EditForm Model="newCustomer" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="CustomerCnic">CNIC:</label>
        <InputText id="CustomerCnic" @bind-Value="newCustomer.CustomerCnic" class="form-control" />
    </div>
    <div class="form-group">
        <label for="CustomerName">Name:</label>
        <InputText id="CustomerName" @bind-Value="newCustomer.CustomerName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="CustomerContact">Contact:</label>
        <InputText id="CustomerContact" @bind-Value="newCustomer.CustomerContact" class="form-control" />
    </div>
    <div class="form-group">
        <label for="ReferenceName">Reference Name:</label>
        <InputText id="ReferenceName" @bind-Value="newCustomer.ReferenceName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="ReferenceContact">Reference Contact:</label>
        <InputText id="ReferenceContact" @bind-Value="newCustomer.ReferenceContact" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Dob">Date of Birth:</label>
        <InputDate id="Dob" @bind-Value="newCustomer.Dob" class="form-control" />
    </div>
    <div class="form-group">
        <label for="PictureUrl">Picture URL:</label>
        <InputText id="PictureUrl" @bind-Value="newCustomer.PictureUrl" class="form-control" />
    </div>

    <div class="button-container">
        <button class="btn btn-primary" type="submit">Add Customer</button>
    </div>
</EditForm>

@code {
    private Customer newCustomer = new Customer();

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(newCustomer.CustomerName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter complete details");
            return;
        }

        List<Customer> existingCustomers = DalCustomer.GetAllCustomers();
        bool existingCustomer = existingCustomers.Any(c => c.CustomerCnic == newCustomer.CustomerCnic);

        if (existingCustomer)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Customer with this CNIC already exists");
            return;
        }

        DalCustomer.AddCustomer(newCustomer);
        await JSRuntime.InvokeVoidAsync("alert", "Customer added successfully");
        newCustomer = new Customer(); // Reset the form
    }
}
