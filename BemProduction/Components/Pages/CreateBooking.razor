@page "/createbooking/{customerId}"
@using ClassLibraryModel
@using ClassLibraryDal
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Create Booking</h3>

@if (customer != null)
{
    <p><strong>Customer Name:</strong> @customer.CustomerName</p>
    <p><strong>Contact:</strong> @customer.CustomerContact</p>

    <EditForm Model="order" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Start Date:</label>
            <InputDate @bind-Value="order.StartDate" class="form-control" />
        </div>
        <div class="form-group">
            <label>Start Shift:</label>
            <InputText @bind-Value="order.StartShift" class="form-control" />
        </div>
        <div class="form-group">
            <label>End Date:</label>
            <InputDate @bind-Value="order.EndDate" class="form-control" />
        </div>
        
        <div class="form-group">
            <label>End Shift:</label>
            <InputText @bind-Value="order.EndShift" class="form-control" />
        </div>
        <div class="form-group">
            <label for="CameraCategory">Camera:</label>
            <InputSelect id="CameraCategory" @bind-Value="order.ProductList" class="form-control">
                <option value="">Select Camera</option>
                @foreach (var product in cameraProducts)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="LensCategory">Lens:</label>
            <InputSelect id="LensCategory" @bind-Value="order.ProductList" class="form-control">
                <option value="">Select Lens</option>
                @foreach (var product in lensProducts)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="GimbleCategory">Gimble:</label>
            <InputSelect id="GimbleCategory" @bind-Value="order.ProductList" class="form-control">
                <option value="">Select Gimble</option>
                @foreach (var product in gimbleProducts)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="LightCategory">Light:</label>
            <InputSelect id="LightCategory" @bind-Value="order.ProductList" class="form-control">
                <option value="">Select Light</option>
                @foreach (var product in lightProducts)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="OtherCategory">Other:</label>
            <InputSelect id="OtherCategory" @bind-Value="order.ProductList" class="form-control">
                <option value="">Select Other</option>
                @foreach (var product in otherProducts)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Remarks:</label>
            <InputTextArea @bind-Value="order.Remarks" class="form-control" />
        </div>
        <div class="form-group">
            <label>Sub Total:</label>
            <InputNumber @bind-Value="order.SubTotal" class="form-control" />
        </div>
        <div class="form-group">
            <label>Discount:</label>
            <InputNumber @bind-Value="order.Discount" class="form-control" />
        </div>
        <div class="form-group">
            <label>Total:</label>
            <InputNumber @bind-Value="order.Total" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Create Booking</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}



@code {
    [Parameter]
    public string CustomerId { get; set; }

    private Customer customer;


    private Order order = new Order { Status = "Booked" };
    private List<Product> cameraProducts;
    private List<Product> lensProducts;
    private List<Product> gimbleProducts;
    private List<Product> lightProducts;
    private List<Product> otherProducts;

    protected override async Task OnInitializedAsync()
    {
        customer = await GetCustomerById(CustomerId);
        var allProducts = await GetAllProducts();

        cameraProducts = allProducts.Where(p => p.Category == "Camera").ToList();
        lensProducts = allProducts.Where(p => p.Category == "Lens").ToList();
        gimbleProducts = allProducts.Where(p => p.Category == "Gimble").ToList();
        lightProducts = allProducts.Where(p => p.Category == "Light").ToList();
        otherProducts = allProducts.Where(p => p.Category == "Other").ToList();
    }

    private async Task<Customer> GetCustomerById(string id)
    {
        return await Task.Run(() => DalCustomer.GetCustomerById(id));
    }

    private async Task<List<Product>> GetAllProducts()
    {
        return await Task.Run(() => DalProductDetails.GetAllProducts());
    }

    private async Task HandleValidSubmit()
    {
        // Add logic to save the order to the database
        Console.WriteLine($"Booking created for {customer.CustomerName} with status {order.Status}");
    }
}
